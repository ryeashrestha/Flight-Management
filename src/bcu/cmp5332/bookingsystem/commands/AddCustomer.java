package bcu.cmp5332.bookingsystem.commands;

import bcu.cmp5332.bookingsystem.main.FlightBookingSystemException;
import bcu.cmp5332.bookingsystem.model.FlightBookingSystem;
import bcu.cmp5332.bookingsystem.model.Customer;

/**
 * {@code AddCustomer} command is responsible for adding a new customer to the flight booking system.
 * It implements the {@link Command} interface and encapsulates the action of creating a new
 * customer with their details and adding them to the {@link FlightBookingSystem}.
 * <p>
 * The command creates a new {@link Customer} object with a unique ID generated by the system,
 * along with the provided name, phone number, email, and special requests. It then adds this customer
 * to the system's customer registry and increments the next customer ID for future customer additions.
 * </p>
 *
 * @author Sanket Shrestha, Riya Shrestha
 * @version 1.0
 * @see Command
 * @see FlightBookingSystem
 * @see Customer
 * @see FlightBookingSystemException
 */
public class AddCustomer implements Command {

    private final String name;
    private final String phone;
    private final String email;
    private final String specialRequests;

    /**
     * Constructs an {@code AddCustomer} command.
     *
     * @param name            The name of the customer.
     * @param phone           The phone number of the customer.
     * @param email           The email address of the customer.
     * @param specialRequests Any special requests or notes for the customer.
     */
    public AddCustomer(String name, String phone, String email, String specialRequests) {
        this.name = name;
        this.phone = phone;
        this.email = email;
        this.specialRequests = specialRequests;
    }

    /**
     * Executes the command to add a new customer to the flight booking system.
     * <p>
     * It creates a new {@link Customer} object, adds it to the {@link FlightBookingSystem},
     * and increments the system's next customer ID.
     * </p>
     *
     * @param flightBookingSystem The {@link FlightBookingSystem} to which the customer is to be added.
     * @return A success message indicating the customer's name and assigned ID.
     * @throws FlightBookingSystemException This exception is not explicitly thrown by this command in the current implementation,
     *                                      but it is included in the method signature as the {@link Command#execute(FlightBookingSystem)}
     *                                      method declares it to be thrown. It is good practice to keep it in the signature
     *                                      in case future implementations of this command might throw exceptions.
     */
    @Override
    public String execute(FlightBookingSystem flightBookingSystem) throws FlightBookingSystemException {
        Customer customer = new Customer(flightBookingSystem.getNextCustomerId(), name, phone, email, specialRequests);
        flightBookingSystem.addCustomer(customer);
        flightBookingSystem.setNextCustomerId(flightBookingSystem.getNextCustomerId() + 1);
        return "Customer " + name + " added with ID " + customer.getId();
    }
}